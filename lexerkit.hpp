/*==============================================================================
MIT License

Copyright (c) 2021 MaybeELEMENT

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Github: https://github.com/MaybeELEMENT/lexertk
==============================================================================*/
#ifndef LEXER_KIT_HPP
#define LEXER_KIT_HPP
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <map>
#include <algorithm>
#include <fstream>
using namespace std;
namespace ELEMENT
{
    enum TOKENS {
        END_LINE  , STRING    , CHARACTER ,
        INTERGER  , DECIMAL   , KEYWORD   ,
        OPERATOR  , VARIABLE  , INCREMENT ,
        DECREMENT , PUNCTUATOR, COMPARISON,
        ASSIGNMENT, OR        , AND       ,
        BITWISE   , BOOLEAN
    }eTokens;
    class Data
    {
    private:
        vector<pair<TOKENS, string>> tokens;
    public:
        void append(TOKENS token, string second) {tokens.push_back(make_pair(token, second));}
        size_t size() const { return tokens.size(); }
        string getType(int i) const {switch(i){
                case END_LINE: return "END_LINE";
                case STRING: return "STRING";
                case CHARACTER: return "CHARACTER";
                case INTERGER: return "INTERGER";
                case DECIMAL: return "DECIMAL";
                case KEYWORD: return "KEYWORD";
                case OPERATOR: return "OPERATOR";
                case VARIABLE: return "VARIABLE";
                case INCREMENT: return "INCREMENT";
                case DECREMENT: return "DECREMENT";
                case PUNCTUATOR: return "PUNCTUATOR";
                case COMPARISON: return "COMPARISON";
                case ASSIGNMENT: return "ASSIGNMENT";
                case OR: return "OR";
                case AND: return "AND";
                case BITWISE: return "BITWISE";
                case BOOLEAN: return "BOOLEAN";
            }return "NULL";}
        string operator[](int i) const
        {
            return tokens[i].second;
        }
        string second(int i) const
        {
            return tokens[i].second;
        }
        TOKENS first(int i) const
        {
            return tokens[i].first;
        }
        string jsonlize() const
        {
            string res;
            res.append("[\n");
            for(int i = 0; i < tokens.size(); i++)
            {
                res.append("\t{\n\t\t\"" + getType(tokens[i].first) + "\": \"" + tokens[i].second + "\"\n\t},\n");
            }
            res.pop_back();
            res.pop_back();
            res.append("\n]");
            return res;
        }
        string yamlize() const
        {
            string res;
            res.append("#Generated by `ELEMENT's lexerKit`\n");
            res.append("lexer:\n");
            for(int i = 0; i < tokens.size(); i++)
            {
                res.append("\t- " + getType(tokens[i].first) + ":\n");
                res.append("\t\t- '" + tokens[i].second + "'\n");
            }
            res.pop_back();
            return res;
        }
        string xmlize() const
        {
            string res;
            res.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            res.append("<!--Generated by `ELEMENT's lexerKit`-->\n");
            res.append("<lexer>\n");
            for(int i = 0; i < tokens.size(); i++)
            {
                string first = getType(tokens[i].first);
                std::for_each(first.begin(), first.end(), [](char & c) {
                    c = ::tolower(c);
                });
                string second = tokens[i].second;
                std::for_each(second.begin(), second.end(), [](char & c) {
                    c = ::tolower(c);
                });
                res.append("\t<" + first + ">" + second + "</" + first + ">\n");
            }
            res.append("</lexer>");
            return res;
        }
    };
    class Lexer
    {
    private:
        string val;
        std::string
        replaceAll( std::string original, std::string from, std::string to ) const
        {
            std::string results;
            std::string::const_iterator end = original.end();
            std::string::const_iterator current = original.begin();
            std::string::const_iterator next = std::search( current, end, from.begin(), from.end() );
            while ( next != end ) {
                results.append( current, next );
                results.append( to );
                current = next + from.size();
                next = std::search( current, end, from.begin(), from.end() );
            }
            results.append( current, next );
            return results;
        }
        void error(string value, string prefix, int line = 1) const
        {

            cout << replaceAll(prefix, "$line", to_string(line)) << value << endl;
            exit(1);
        }
    public:
        static string read_file(string value)
        {
            ifstream file(value);
            if(file.is_open())
            {
                string str((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
                return str;
            }
            return "null";
        }


        /*CONFIGURATION*/
        string error_prefix = "Error on line $line : ";
        string decimal_error_msg = "Invalid syntax '.'";
        string unclose_string_1 = "Unclosed `'`";
        string unclose_string_2 = "Unclosed `\"`";
        string unfinished_escape = "Unfinished `\\`";
        string true_template = "true";
        string and_template = "and";
        string or_template = "or";
        string false_template = "false";
        bool str_classify = false;
        bool str_error = true;
        bool decimal_error = true;
        bool str_only_escape = false;
        bool use_and_or_on_operator = false;
        bool use_bitwise = false;
        bool use_boolean = true;
        bool use_and_or_keyword = false;
        /*CONFIGURATION*/


        Lexer(string value) : val(value)
        {
            val = value;
        }
        Data Process() const
        {
            /*DEFINATION*/
            bool instr1 = false;
            bool escaped = false;
            bool instr2 = false;
            bool instring = false;
            bool wasstring = false;
            bool inchar = false;
            bool waschar = false;
            bool invar = false;
            bool wasint = false;
            bool inint = false;
            bool indecimal = false;
            /*DEFINATION*/
            int line = 1;
            string temp;
            Data res;
            for(int i = 0; i < val.length(); i++)
            {
                // cout << val[i] << endl;
                switch(val[i]){
                    case '\n':
                        if(instring || inchar);
                        else
                        {
                            if(temp.length() < 1);
                            else if(wasstring) res.append(STRING, temp);
                            else if(waschar) res.append(CHARACTER, temp);
                            else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                            else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                            else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                            else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                            else if(inint) res.append(INTERGER, temp);
                            else if(indecimal) res.append(DECIMAL, temp);
                            else if(invar) res.append(VARIABLE, temp);
                            else res.append(KEYWORD, temp);
                            res.append(END_LINE, "\\n");
                            temp.clear();
                            wasstring = false;
                            invar = false;
                            waschar = false;
                            inint = false;
                            escaped = false;
                            indecimal = false;
                        }
                        line++;
                    break;
                    case ' ':
                        if(instring || inchar) temp.push_back(' ');
                        else
                        {
                            if(temp.length() < 1);
                            else if(wasstring) res.append(STRING, temp);
                            else if(waschar) res.append(CHARACTER, temp);
                            else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                            else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                            else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                            else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                            else if(inint) res.append(INTERGER, temp);
                            else if(indecimal) res.append(DECIMAL, temp);
                            else if(invar) res.append(VARIABLE, temp);
                            else res.append(KEYWORD, temp);
                            temp.clear();
                            wasstring = false;
                            waschar = false;
                            invar = false;
                            inint = false;
                            escaped = false;
                            indecimal = false;
                        }
                    break;
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                        if(instring || inchar) temp.push_back(val[i]);
                        else
                        {
                            if(inint || indecimal)
                            {
                                temp.push_back(val[i]);
                            }
                            else if(temp.find_first_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_") == string::npos)
                            {
                                inint = true;
                                temp.push_back(val[i]);
                            }
                            else temp.push_back(val[i]);
                            escaped = false;
                        }
                    break;
                    case '.':
                        if(!instring && !inchar)
                        {
                            if(inint)
                            {
                                temp.append(".");
                                inint = false;
                            escaped = false;
                                indecimal = true;
                            }
                            else if(indecimal && decimal_error) error(decimal_error_msg, error_prefix, line);
                            else 
                            {
                                if(temp.length() < 1);
                                else if(wasstring) res.append(STRING, temp);
                                else if(waschar) res.append(CHARACTER, temp);
                                else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                                else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                                else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                                else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                                else if(inint) res.append(INTERGER, temp);
                                else if(indecimal) res.append(DECIMAL, temp);
                                else if(invar) res.append(VARIABLE, temp);
                                else res.append(KEYWORD, temp);
                                wasstring = false;
                                invar = false;
                                waschar = false;
                                inint = false;
                            escaped = false;
                                indecimal = false;
                                temp.clear();
                                res.append(OPERATOR, ".");
                            }
                        }
                        else temp.append(".");
                    break;
                    case '=':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(COMPARISON, "==");
                            i++;
                        }
                        else res.append(OPERATOR, "=");
                    }
                    break;
                    case '!':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(COMPARISON, "!=");
                            i++;
                        }
                        else res.append(OPERATOR, "!");
                    }
                    break;
                    case '&':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                        escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '&')
                        {
                            if(use_and_or_on_operator) res.append(AND, "&&");
                            else res.append(OPERATOR, "&&");
                            i++;
                        }
                        else if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "&=");
                            i++;
                        }
                        else if(use_bitwise) res.append(BITWISE, "&");
                        else res.append(OPERATOR, "&");
                    }
                    break;
                    case '?':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == ':')
                        {
                            res.append(OPERATOR, "?:");
                            i++;
                        }
                        else res.append(OPERATOR, "?");
                    }
                    break;
                    case '|':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '|')
                        {
                            if(use_and_or_on_operator) res.append(OR, "||");
                            else res.append(OPERATOR, "||");
                            i++;
                        }
                        else if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "|=");
                            i++;
                        }
                        else if(use_bitwise) res.append(BITWISE, "|");
                        else res.append(OPERATOR, "|");
                    }
                    break;
                    case '(':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, "(");
                    }
                    break;
                    case ')':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, ")");
                    }
                    break;
                    case '[':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, "[");
                    }
                    break;
                    case ']':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, "]");
                    }
                    break;
                    case '{':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, "{");
                    }
                    break;
                    case '}':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, "}");
                    }
                    break;
                    case '<':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(COMPARISON, "<=");
                            i++;
                        }
                        else if(val[i + 1] == '<')
                        {
                            res.append(OPERATOR, "<<");
                            i++;
                        }
                        else if(val[i + 1] == '<' && val[i + 2] == '=')
                        {
                            res.append(ASSIGNMENT, "<<=");
                            i += 2;
                        }
                        else if(val[i + 1] == '=' && val[i + 2] == '>')
                        {
                            res.append(OPERATOR, "<=>");
                            i += 2;
                        }
                        else res.append(COMPARISON, "<");
                    }
                    break;
                    case '>':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(COMPARISON, ">=");
                            i++;
                        }
                        else if(val[i + 1] == '>')
                        {
                            res.append(OPERATOR, ">>");
                            i++;
                        }
                        else if(val[i + 1] == '>' && val[i + 2] == '=')
                        {
                            res.append(ASSIGNMENT, ">>=");
                            i += 2;
                        }
                        else res.append(COMPARISON, ">");
                    }
                    break;
                    case ';':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(PUNCTUATOR, ";");
                    }
                    break;
                    case '+':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '+')
                        {
                            res.append(INCREMENT, "++");
                            i++;
                        }
                        else if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "+=");
                            i++;
                        }
                        else res.append(OPERATOR, "+");
                    }
                    break;
                    case '^':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "^=");
                            i++;
                        }
                        else if(use_bitwise) res.append(BITWISE, "^");
                        else res.append(OPERATOR, "^");
                    }
                    break;
                    case '~':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(use_bitwise) res.append(BITWISE, "~");
                        else res.append(OPERATOR, "~");
                    }
                    break;
                    case '-':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '-')
                        {
                            res.append(DECREMENT, "--");
                            i++;
                        }
                        else if(val[i + 1] == '>')
                        {
                            res.append(OPERATOR, "->");
                            i++;
                        }
                        else if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "-=");
                            i++;
                        }
                        else res.append(OPERATOR, "-");
                    }
                    break;
                    case '*':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "*=");
                            i++;
                        }
                        else
                        res.append(OPERATOR, "*");
                    }
                    break;
                    case '/':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "/=");
                            i++;
                        }
                        else
                        res.append(OPERATOR, "/");
                    }
                    break;
                    case '%':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        if(val[i + 1] == '=')
                        {
                            res.append(ASSIGNMENT, "%=");
                            i++;
                        }
                        else
                        res.append(OPERATOR, "%");
                    }
                    break;
                    case ',':
                    if(inchar || instring) temp.push_back(val[i]);
                    else
                    {
                        if(temp.length() < 1);
                        else if(wasstring) res.append(STRING, temp);
                        else if(waschar) res.append(CHARACTER, temp);
                        else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
                        else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
                        else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
                        else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
                        else if(inint) res.append(INTERGER, temp);
                        else if(indecimal) res.append(DECIMAL, temp);
                        else if(invar) res.append(VARIABLE, temp);
                        else res.append(KEYWORD, temp);
                        wasstring = false;
                        invar = false;
                        waschar = false;
                        inint = false;
                            escaped = false;
                        indecimal = false;
                        temp.clear();
                        res.append(OPERATOR, ",");
                    }
                    break;
                    case '"':
                        if(inchar || instr1 || escaped) 
                        {
                            temp.push_back('"');
                            escaped = false;
                        }
                        else if(!instring)
                        {
                            instr2 = true;
                            instring = true;
                        }
                        else
                        {
                            instr2 = false;
                            instring = false;
                            wasstring = true;
                        }
                    break;
                    case '$':
                    if(instring || inchar) temp.push_back('$');
                    else invar = true;
                    break;
                    case '\'':
                        if(instr2 || escaped) 
                        {
                            temp.push_back('\'');
                            escaped = false;
                        }
                        else if(!instr1 && !inchar)
                        {
                            instr1 = true;
                            if(str_classify)
                            {
                                inchar = true;
                            }
                            else instring = true;
                        }
                        else
                        {
                            if(str_classify)
                            {
                                if(temp.length() > 1 && str_error) error("Multi-character character", error_prefix, line);
                            }
                            if(!str_classify) 
                            {instring = false;}
                            else inchar = false;
                            if(str_classify) waschar = true;
                            else wasstring = true;
                            instr1 = false;
                        }
                    break;
                    case '\\':
                    if(escaped) 
                    {
                        escaped = false;
                        temp.append("\\");
                    }
                    else escaped = true;
                    break;
                    default:
                    if(escaped)
                    {
                        if(str_only_escape)
                        {
                            if(instring || inchar)
                            {
                                if(val[i] == 'n') temp.push_back('\n');
                                else if(val[i] == 'r') temp.push_back('\r');
                                else if(val[i] == 't') temp.push_back('\t');
                                else if(val[i] == 'b') temp.push_back('\b');
                                else if(val[i] == 'f') temp.push_back('\f');
                                else if(val[i] == 'v') temp.push_back('\v');
                            }
                        }
                        else
                        {
                            if(val[i] == 'n') temp.push_back('\n');
                            else if(val[i] == 'r') temp.push_back('\r');
                            else if(val[i] == 't') temp.push_back('\t');
                            else if(val[i] == 'b') temp.push_back('\b');
                            else if(val[i] == 'f') temp.push_back('\f');
                            else if(val[i] == 'v') temp.push_back('\v');
                        }
                        escaped = false;
                    }
                    else
                        temp.push_back(val[i]);
                    break;
                }
            }
            if(temp.length() < 1);
            else if(wasstring) res.append(STRING, temp);
            else if(waschar) res.append(CHARACTER, temp);
            else if(use_boolean && temp == true_template) res.append(BOOLEAN, true_template);
            else if(use_boolean && temp == false_template) res.append(BOOLEAN, false_template);
            else if(use_and_or_keyword && temp == and_template) res.append(AND, and_template);
            else if(use_and_or_keyword && temp == or_template) res.append(OR, or_template);
            else if(inint) res.append(INTERGER, temp);
            else if(indecimal) res.append(DECIMAL, temp);
            else if(invar) res.append(VARIABLE, temp);
            else res.append(KEYWORD, temp);
            temp.clear();
            wasstring = false;
            waschar = false;
            inint = false;
            if(escaped) error(unfinished_escape, error_prefix, line);
            escaped = false;
            invar = false;
            indecimal = false;
            if(instr1 && str_error) error(unclose_string_1, error_prefix, line);
            if(instr2 && str_error) error(unclose_string_2, error_prefix, line);
            return res;
        }
    };
}
#endif